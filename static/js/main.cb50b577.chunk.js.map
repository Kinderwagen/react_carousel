{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","currentIndex","nextBtnClickHandler","props","images","frameSize","infinite","step","itemWidth","maxTransition","length","setState","prevState","prevBtnClickHandler","this","animationDuration","className","style","width","height","transform","transitionDuration","map","image","src","alt","type","onClick","disabled","Component","App","handleInputChange","e","target","name","value","Error","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cb50b577.chunk.js","sourcesContent":["import { Component } from 'react';\n\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  itemWidth: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\ntype State = {\n  currentIndex: number;\n};\n\nexport class Carousel extends Component<Props, State> {\n  state: Readonly<State> = {\n    currentIndex: 0,\n  };\n\n  nextBtnClickHandler = () => {\n    const { currentIndex } = this.state;\n    const {\n      images,\n      frameSize,\n      infinite,\n      step,\n      itemWidth,\n    } = this.props;\n\n    const maxTransition = images.length * itemWidth - frameSize * itemWidth;\n\n    if (infinite && currentIndex <= -maxTransition) {\n      this.setState({\n        currentIndex: frameSize * itemWidth,\n      });\n    }\n\n    this.setState((prevState) => ({\n      currentIndex:\n        prevState.currentIndex - step * itemWidth < -maxTransition\n          ? -maxTransition\n          : prevState.currentIndex - step * itemWidth,\n    }));\n  };\n\n  prevBtnClickHandler = () => {\n    const { currentIndex } = this.state;\n\n    const {\n      images,\n      itemWidth,\n      step,\n      infinite,\n    } = this.props;\n\n    if (infinite && currentIndex >= 0) {\n      this.setState({\n        currentIndex: -(images.length * itemWidth),\n      });\n    }\n\n    this.setState((prevState) => ({\n      currentIndex:\n        prevState.currentIndex + step * itemWidth > 0\n          ? 0\n          : prevState.currentIndex + step * itemWidth,\n    }));\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      animationDuration,\n      infinite,\n    } = this.props;\n    const { currentIndex } = this.state;\n\n    return (\n      <div className=\"Carousel\">\n        <div\n          className=\"Carousel__wrapper\"\n          style={{\n            width: `${itemWidth * frameSize}px`,\n            height: `${itemWidth}px`,\n          }}\n        >\n          <ul\n            className=\"Carousel__list\"\n            style={{\n              transform: `translate(${currentIndex}px)`,\n              transitionDuration: `${animationDuration}ms`,\n            }}\n          >\n            {images.map((image) => {\n              return (\n                <li\n                  className=\"Carousel__img\"\n                  key={image}\n                  style={{ height: '100%' }}\n                >\n                  <img src={image} alt={image} style={{ width: `${itemWidth}px` }} />\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n\n        <div className=\"Carousel__buttons\">\n          <button\n            className=\"Carousel__btn\"\n            type=\"button\"\n            onClick={this.prevBtnClickHandler}\n            disabled={!infinite && currentIndex === 0}\n          >\n            Prev\n          </button>\n          <button\n            className=\"Carousel__btn\"\n            type=\"button\"\n            onClick={this.nextBtnClickHandler}\n            data-cy=\"next\"\n            disabled={!infinite && currentIndex === itemWidth\n              * (frameSize - images.length)}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import { ChangeEvent, Component } from 'react';\n\nimport { Carousel } from './components/Carousel';\n\nimport './App.scss';\n\ntype State = {\n  images: string[];\n  itemWidth: number;\n  step: number;\n  frameSize: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\nclass App extends Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  handleInputChange = (e: ChangeEvent) => {\n    const { name, value } = e.target as HTMLInputElement;\n\n    switch (name) {\n      case 'step':\n        if (+value >= 0 && +value <= 10) {\n          this.setState({ [name]: +value });\n        }\n\n        break;\n\n      case 'frameSize':\n        if (+value >= 0 && +value <= 10) {\n          this.setState({ [name]: +value });\n        }\n\n        break;\n\n      case 'itemWidth':\n        if (+value >= 0 && +value <= 300) {\n          this.setState({ [name]: +value });\n        }\n\n        break;\n\n      case 'animationDuration':\n        if (+value >= 0 && +value <= 7000) {\n          this.setState({ [name]: +value });\n        }\n\n        break;\n\n      case 'infinite':\n        this.setState((state) => ({\n          [name]: !state.infinite,\n        }));\n\n        break;\n\n      default:\n        throw new Error('Wrong case');\n    }\n  };\n\n  render() {\n    const {\n      images,\n      animationDuration,\n      infinite,\n      frameSize,\n      itemWidth,\n      step,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n\n        <form className=\"App__form\">\n          <label className=\"App__field\">\n            Item Width\n            <input\n              name=\"itemWidth\"\n              className=\"App__input\"\n              type=\"number\"\n              onChange={this.handleInputChange}\n              value={itemWidth}\n            />\n          </label>\n\n          <label className=\"App__field\">\n            Frame Size\n            <input\n              name=\"frameSize\"\n              className=\"App__input\"\n              type=\"number\"\n              onChange={this.handleInputChange}\n              value={frameSize}\n            />\n          </label>\n\n          <label className=\"App__field\">\n            Step\n            <input\n              name=\"step\"\n              className=\"App__input\"\n              type=\"number\"\n              onChange={this.handleInputChange}\n              value={step}\n            />\n          </label>\n\n          <label className=\"App__field\">\n            Animation Duration\n            <input\n              name=\"animationDuration\"\n              className=\"App__input\"\n              type=\"number\"\n              onChange={this.handleInputChange}\n              value={animationDuration}\n            />\n          </label>\n\n          <label className=\"App__field\">\n            Infinite\n            <input\n              type=\"checkbox\"\n              name=\"infinite\"\n              onChange={this.handleInputChange}\n            />\n          </label>\n        </form>\n      </div>\n    );\n  }\n}\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}